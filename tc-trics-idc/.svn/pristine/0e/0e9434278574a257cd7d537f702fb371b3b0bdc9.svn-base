package com.manage.idc.cable.controller;

import com.github.pagehelper.PageInfo;
import com.manage.idc.cable.domain.Cable;
import com.manage.idc.cable.domain.ext.CableExt;
import com.manage.idc.cable.domain.ext.CableQuery;
import com.manage.idc.cable.service.CableService;
import com.manage.idc.common.annotation.Operation;
import com.manage.idc.common.entiy.PageRequest;
import com.manage.idc.common.entiy.ResultResponse;
import com.manage.idc.common.utils.DataSetUtile;
import com.manage.idc.device.domain.Res;
import com.manage.idc.system.domain.Room;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletResponse;
import java.util.List;
import java.util.Map;

/**
 * @Author: WangZiFan
 * @Date: 2019/10/24 16:06
 * @Description:
 */
@Controller
@Api(tags = "线缆管理")
@RequestMapping("cable")
public class CableController {
    @Autowired
    private CableService cableService;

    /*
     * @Description: 线缆信息管理页面
     * @Author: WangZiFan
     * @Date: 2019/10/30 10:59
     * @param model
     * @return org.springframework.web.servlet.ModelAndView
     */
    @GetMapping("/toCable")
    @ApiOperation(value = "线缆信息管理页面", httpMethod = "GET", response = ModelAndView.class)
    public ModelAndView toCable(ModelAndView model){
        model.setViewName("cable/cable");
        return model;
    }


    @GetMapping("/toImport")
    @ApiOperation(value = "导入页面", httpMethod = "GET", response = ModelAndView.class)
    public ModelAndView toImport(ModelAndView model){
        model.setViewName("cable/cableImport");
        return model;
    }


    @GetMapping("/toEdit/{id}")
    @ApiOperation(value = "编辑页面", httpMethod = "GET", response = ModelAndView.class)
    public ModelAndView toCable(ModelAndView model,@PathVariable("id") Long id){
        Cable cable = new Cable();
        cable.setId(id);
        cable = cableService.getCable(cable);
        model.setViewName("cable/cableEdit");
        model.addObject("bean",cable);
        return model;
    }

    /*
     * @Description: 线缆标签管理页面
     * @Author: WangZiFan
     * @Date: 2019/10/30 11:00
     * @param model
     * @return org.springframework.web.servlet.ModelAndView
     */
    @GetMapping("/toCableLabel")
    @ApiOperation(value = "线缆标签管理页面", httpMethod = "GET", response = ModelAndView.class)
    public ModelAndView toCableLabel(ModelAndView model){
        model.setViewName("cable/cableLabel");
        return model;
    }

    /*
     * @Description: 线缆导入页面
     * @Author: WangZiFan
     * @Date: 2019/10/30 11:14
     * @param model
     * @return org.springframework.web.servlet.ModelAndView
     */
    @GetMapping("/toCableImport")
    @ApiOperation(value = "线缆标签管理页面", httpMethod = "GET", response = ModelAndView.class)
    public ModelAndView toCableImport(ModelAndView model){
        model.setViewName("cable/cableImport");
        return model;
    }

    /*
     * @Description: 线缆贴标
     * @Author: WangZiFan
     * @Date: 2019/10/30 11:02
     * @param model
     * @return org.springframework.web.servlet.ModelAndView
     */
    @GetMapping("/toCableBind")
    @ApiOperation(value = "线缆贴标", httpMethod = "GET", response = ModelAndView.class)
    public ModelAndView toCableBind(ModelAndView model){
        model.setViewName("cable/cableBind");
        return model;
    }


    /*
     * @Description: APP获取线缆分页
     * @Author: WangZiFan
     * @Date: 2019/10/25 17:10
     * @param queryStr
     * @param pageRequest
     * @return com.manage.idc.common.entiy.ResultResponse
     */
    @GetMapping("/app/getAppCablePage")
    @ApiOperation(value = "APP获取线缆分页", httpMethod = "GET", response = ResultResponse.class)
    @ResponseBody
    public ResultResponse getAppCablePage(CableQuery cableQuery, PageRequest pageRequest){
        PageInfo<CableExt> pageInfo = cableService.getAppCablePage(cableQuery,pageRequest);
        return DataSetUtile.setPageSuccessResult(pageInfo);
    }


    /*
     * @Description: 获取线缆分页
     * @Author: WangZiFan
     * @Date: 2019/10/30 16:06
     * @param cable
     * @param pageRequest
     * @return com.manage.idc.common.entiy.ResultResponse
     */
    @GetMapping("/getPage")
    @ApiOperation(value = "获取线缆分页", httpMethod = "GET", response = ResultResponse.class)
    @ResponseBody
    public ResultResponse getPage(CableQuery cable, PageRequest pageRequest){
        PageInfo<CableExt> pageInfo = cableService.getPage(cable,pageRequest);
        return DataSetUtile.setPageSuccessResult(pageInfo);
    }
    /*
     * @Description: APP获取线缆信息
     * @Author: WangZiFan
     * @Date: 2019/10/25 17:11
     * @param id
     * @return com.manage.idc.common.entiy.ResultResponse
     */
    @GetMapping("/app/getAppCableInfo")
    @ApiOperation(value = "APP获取线缆信息", httpMethod = "GET", response = ResultResponse.class)
    @ResponseBody
    public ResultResponse getAppCableInfo(Long id){
        List<Map<String,Object>> info = cableService.getAppCableInfo(id);
        return DataSetUtile.setSuccessResult(info);
    }

    /*
     * @Description: 导入线缆
     * @Author: WangZiFan
     * @Date: 2019/10/24 16:11
     * @param cableFile
     * @return com.manage.idc.common.entiy.ResultResponse
     */
    @PostMapping("importCable")
    @Operation(operation = "导入线缆")
    @ResponseBody
    @ApiOperation(value = "导入线缆", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse importCable(MultipartFile cableFile){
        try {
            boolean b = cableService.importCable(cableFile);
            if(!b){
                return DataSetUtile.setImportError("上传模板与解析模板不符，请下载最新模板后重试!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            return DataSetUtile.setErrorResult(e);
        }
        return DataSetUtile.setSuccessResult(null);
    }


    @PostMapping("addCable")
    @Operation(operation = "添加线缆")
    @ResponseBody
    @ApiOperation(value = "导入线缆", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse addCable(Cable cable){
        cableService.addCable(cable);
        return DataSetUtile.setSuccessResult(null);
    }


    /*
     * @Description: 导出线缆模板
     * @Author: WangZiFan
     * @Date: 2019/10/24 17:25
     * @param response
     * @return void
     */
    @GetMapping("exportCableModel")
    @Operation(operation = "导出线缆模板")
    @ResponseBody
    @ApiOperation(value = "导出线缆模板", httpMethod = "GET")
    public void exportCableModel(HttpServletResponse response){
        try {
            cableService.exportCableModel(response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @GetMapping("exportCable")
    @ResponseBody
    @Operation(operation = "导出线缆")
    @ApiOperation(value = "导出线缆", httpMethod = "GET")
    public void exportCable(@RequestParam(name="ids",required = false) List<Long> ids,HttpServletResponse response){
        try {
            cableService.exportCable(ids,response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }




    /*
     * @Description: 删除线缆
     * @Author: WangZiFan
     * @Date: 2019/10/22 21:13
     * @param res
     * @return com.manage.idc.common.entiy.ResultResponse
     */
    @PostMapping("delCable/{id}")
    @ResponseBody
    @RequiresPermissions("cable:delCable")
    @Operation(operation = "删除线缆")
    @ApiOperation(value = "删除线缆", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse delCable(@PathVariable Long id){
        cableService.delCable(id);
        return DataSetUtile.setSuccessResult(null);
    }


    @PostMapping("batchDel")
    @RequiresPermissions("cable:batchDel")
    @ResponseBody
    @Operation(operation = "批量删除线缆")
    @ApiOperation(value = "批量删除", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse batchDel(@RequestBody List<Long> ids){
        cableService.batchDel(ids);
        return DataSetUtile.setSuccessResult(null);
    }

    /*
     * @Description: 修改线缆
     * @Author: WangZiFan
     * @Date: 2019/10/24 18:50
     * @param cable
     * @return com.manage.idc.common.entiy.ResultResponse
     */
    @PostMapping("updateCable")
    @Operation(operation = "修改线缆")
    @RequiresPermissions("cable:updateCable")
    @ResponseBody
    @ApiOperation(value = "修改线缆", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse updateCable(Cable cable){
        cableService.updateCable(cable);
        return DataSetUtile.setSuccessResult(null);
    }

    /*
     * @Description: 绑定标签
     * @Author: WangZiFan
     * @Date: 2019/10/24 18:51
     * @param cable
     * @return com.manage.idc.common.entiy.ResultResponse
     */
    @PostMapping("bindLabel")
    @RequiresPermissions("cable:bindLabel")
    @ResponseBody
    @Operation(operation = "绑定标签")
    @ApiOperation(value = "绑定标签", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse bindLabel(Cable cable){
        cableService.bindLabel(cable);
        return DataSetUtile.setSuccessResult(null);
    }


    @GetMapping("print")
    @ResponseBody
    @Operation(operation = "打印")
    @ApiOperation(value = "打印", httpMethod = "GET", response = ResultResponse.class)
    public ResultResponse print(Cable cable){
        cableService.print(cable);
        return DataSetUtile.setSuccessResult(null);
    }


    @GetMapping("confirm")
    @ResponseBody
    @Operation(operation = "确认贴标")
    @ApiOperation(value = "确认贴标", httpMethod = "GET", response = ResultResponse.class)
    public ResultResponse confirm(Cable cable){
        cableService.confirm(cable);
        return DataSetUtile.setSuccessResult(null);
    }


    @PostMapping("app/bindLabel")
    @ResponseBody
    @Operation(operation = "绑定标签")
    @ApiOperation(value = "绑定标签", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse appBindLabel(Cable cable){
        String s = cableService.appBindLabel(cable);
        if(s == null){
            return DataSetUtile.setSuccessResult(null);
        }else{
            return DataSetUtile.setErrorResultMessage(s);
        }

    }


    @PostMapping("untyingLabel")
    @ResponseBody
    @ApiOperation(value = "解绑", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse untyingLabel(Cable cable){
        cableService.untyingLabel(cable);
        return DataSetUtile.setSuccessResult(null);
    }


    @PostMapping("batchPrint")
    @ResponseBody
    @ApiOperation(value = "批量打印", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse batchPrint(@RequestBody List<Cable> cableList){
        for (Cable cable:
                cableList) {
            cableService.print(cable);
        }
        return DataSetUtile.setSuccessResult(null);
    }


    @PostMapping("bindPcExport")
    @ResponseBody
    @ApiOperation(value = "PC贴标导出", httpMethod = "POST", response = ResultResponse.class)
    public ResultResponse bindPcExport(@RequestParam(name="ids",required = false) List<Long> ids,HttpServletResponse response){
        cableService.bindPcExport(ids,response);
        return DataSetUtile.setSuccessResult(null);
    }
}
