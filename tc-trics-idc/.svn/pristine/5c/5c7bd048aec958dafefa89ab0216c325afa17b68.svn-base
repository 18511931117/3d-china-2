package com.manage.idc.task.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.manage.idc.common.entiy.IdcConstant;
import com.manage.idc.common.entiy.PageRequest;
import com.manage.idc.common.enums.TaskState;
import com.manage.idc.common.enums.TaskType;
import com.manage.idc.common.utils.DataSetUtile;
import com.manage.idc.common.utils.IdGen;
import com.manage.idc.common.utils.SessionUtil;
import com.manage.idc.device.domain.Res;
import com.manage.idc.device.mapper.ResMapper;
import com.manage.idc.log.domain.RepairTaskLog;
import com.manage.idc.log.mapper.RepairTaskLogMapper;
import com.manage.idc.system.domain.Label;
import com.manage.idc.system.mapper.LabelMapper;
import com.manage.idc.task.domain.*;
import com.manage.idc.task.mapper.RepairTaskDescMapper;
import com.manage.idc.task.mapper.RepairTaskMapper;
import com.manage.idc.task.service.RepairTaskService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

/**
 * @Description
 * @Author lyq_j
 * @DATE 2019/10/24 13:49
 **/
@Service
@Transactional
public class RepairTaskServiceImpl  implements RepairTaskService {
    @Autowired
    private RepairTaskMapper repairTaskMapper;
    @Autowired
    private RepairTaskDescMapper repairTaskDescMapper;
    @Autowired
    private ResMapper resMapper;
    @Autowired
    private LabelMapper labelMapper;
    @Autowired
    private RepairTaskLogMapper repairTaskLogMapper;

    @Override
    public void add(RepairTask repairTask) {
        long allocationTaskId = IdGen.getUUId();
        repairTask.setId(allocationTaskId);
        repairTask.setCreateTime(new Date());
        repairTask.setTaskType(TaskType.RES_BORROW.getType());
        repairTask.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
        repairTask.setState(TaskState.CONDUCT_TASK.getState());
        repairTaskMapper.insertSelective(repairTask);

        String resId = repairTask.getResIds();
        List<String> resIds = Arrays.asList(resId.split(","));
        for (String resid : resIds) {
            Res res = resMapper.selectByPrimaryKey(Long.parseLong(resid));
            //添加设备维修详情记录
            RepairTaskDesc repairTaskDesc = new RepairTaskDesc();
            repairTaskDesc.setCreateTime(new Date());
            repairTaskDesc.setId(IdGen.getUUId());
            String tid = res.getTid();
            //根据Tid查询标签
            Label label = labelMapper.selectByTid(tid);
            repairTaskDesc.setLabelId(label.getId());
            repairTaskDesc.setResId(res.getId());
            repairTaskDesc.setRoomId(res.getRoomId());
            repairTaskDesc.setState(TaskState.CONDUCT_TASK.getState());
            repairTaskDesc.setTaskId(allocationTaskId);
            repairTaskDesc.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
            repairTaskDescMapper.insertSelective(repairTaskDesc);
        }
    }

    @Override
    public void delete(RepairTask repairTask) {
        repairTask.setIsDel(IdcConstant.SYSTEM_ISDEL.DEL);
        repairTaskMapper.updateByPrimaryKeySelective(repairTask); //更新调拨任务
        RepairTaskDesc repairTaskDesc = new RepairTaskDesc();
        repairTaskDesc.setTaskId(repairTask.getId());
        repairTaskDesc.setIsDel(IdcConstant.SYSTEM_ISDEL.DEL);
        repairTaskDescMapper.updateByTaskId(repairTaskDesc);
    }

    @Override
    public List<RepairTaskDesc> desc(RepairTask repairTask) {
        Long id = repairTask.getId();
        return repairTaskDescMapper.selectByCheckTaskId(id);
    }

    @Override
    public List<RepairTaskDesc> export(RepairTask repairTask) {
        Long taskId = repairTask.getId();
        return  repairTaskDescMapper.selectByCheckTaskId(taskId);
    }

    @Override
    public PageInfo<RepairTask> getPage(RepairTask repairTask, PageRequest pageRequest) {
        //        allocationTask.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);  前段传入 过滤条件 默认是全部
        if(null != pageRequest){
            PageHelper.startPage(pageRequest.getPage(),pageRequest.getLimit());
        }
        repairTask.setOrgId(SessionUtil.getUser().getOrgId());
        List<RepairTask> list = repairTaskMapper.selectByCondition(DataSetUtile.setQueryMap(repairTask,pageRequest,null));
        return new PageInfo<RepairTask>(list);
    }

    @Override
    public void updateState(RepairTask repairTask) {
        //更新任务状态
        repairTask.setState(TaskState.SUCCESS_TASK.getState());
        repairTaskMapper.updateByPrimaryKeySelective(repairTask);
        //更新任务详情状态
        RepairTaskDesc repairTaskDesc = new RepairTaskDesc();
        repairTaskDesc.setTaskId(repairTask.getId());
        repairTaskDesc.setState(repairTask.getState());
        repairTaskDescMapper.updateByTaskId(repairTaskDesc);

        //任务完成后保存到 盘点任务日志表中
        if(repairTask.getState()==TaskState.SUCCESS_TASK.getState()){
            RepairTask repairTasks = repairTaskMapper.selectByPrimaryKey(repairTask.getId());
            RepairTaskLog checkTaskLog = new RepairTaskLog();
            checkTaskLog.setId(IdGen.getUUId());
            checkTaskLog.setTaskName(repairTasks.getTaskName());
            checkTaskLog.setTaskType(repairTasks.getTaskType());
            checkTaskLog.setOrgId(repairTasks.getOrgId());
            checkTaskLog.setStartTime(repairTasks.getCreateTime());
            checkTaskLog.setEndTime(new Date());
            checkTaskLog.setState(repairTasks.getState());
            checkTaskLog.setTaskId(repairTasks.getId());
            checkTaskLog.setPersonName("");
            repairTaskLogMapper.insertSelective(checkTaskLog);
        }
    }

    @Override
    public PageInfo<RepairTask> getRepairTaskPage(RepairTask repairTask, PageRequest pageRequest) {
        if(null != pageRequest){
            PageHelper.startPage(pageRequest.getPage(),pageRequest.getLimit());
        }
        repairTask.setOrgId(SessionUtil.getUser().getOrgId());
        List<RepairTask> list = repairTaskMapper.getRepairTaskPage(DataSetUtile.setQueryMap(repairTask,pageRequest,null));
        return new PageInfo<RepairTask>(list);
    }

    @Override
    public List<RepairTaskDesc> getRepairTaskDesc(RepairTaskDesc repairTask) {
        return repairTaskDescMapper.getRepairTaskDesc(repairTask);
    }
}
