<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.manage.idc.log.mapper.AlarmsLogMapper" >
  <resultMap id="BaseResultMap" type="com.manage.idc.log.domain.AlarmsTaskLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="res_id" property="resId" jdbcType="BIGINT" />
    <result column="room_id" property="roomId" jdbcType="BIGINT" />
    <result column="org_id" property="orgId" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="realm_name" property="realmName" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="person" property="person" jdbcType="BIGINT" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="feedback" property="feedback" jdbcType="VARCHAR" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from alarms_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.manage.idc.log.domain.AlarmsTaskLog" >
    insert into alarms_log (id, res_id, room_id, 
      org_id, user_id, state, 
      realm_name, create_time, person, 
      remark, feedback)
    values (#{id,jdbcType=BIGINT}, #{resId,jdbcType=BIGINT}, #{roomId,jdbcType=BIGINT}, 
      #{orgId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{state,jdbcType=INTEGER}, 
      #{realmName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{person,jdbcType=BIGINT}, 
      #{remark,jdbcType=VARCHAR}, #{feedback,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.manage.idc.log.domain.AlarmsTaskLog" >
    update alarms_log
    set res_id = #{resId,jdbcType=BIGINT},
      room_id = #{roomId,jdbcType=BIGINT},
      org_id = #{orgId,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      state = #{state,jdbcType=INTEGER},
      realm_name = #{realmName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      person = #{person,jdbcType=BIGINT},
      remark = #{remark,jdbcType=VARCHAR},
      feedback = #{feedback,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select id, res_id, room_id, org_id, user_id, state, realm_name, create_time, person, 
    remark, feedback
    from alarms_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, res_id, room_id, org_id, user_id, state, realm_name, create_time, person, 
    remark, feedback
    from alarms_log
  </select>

  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.manage.idc.log.domain.AlarmsTaskLog" useGeneratedKeys="true">
    insert into alarms_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="resId != null">
        res_id,
      </if>
      <if test="roomId != null">
        room_id,
      </if>
      <if test="orgId != null">
        org_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="state != null">
        `state`,
      </if>
      <if test="realmName != null">
        realm_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="person != null">
        person,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="feedback != null">
        feedback,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="resId != null">
        #{resId,jdbcType=BIGINT},
      </if>
      <if test="roomId != null">
        #{roomId,jdbcType=BIGINT},
      </if>
      <if test="orgId != null">
        #{orgId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="realmName != null">
        #{realmName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="person != null">
        #{person,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="feedback != null">
        #{feedback,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>



  <select id="selectByCondition" parameterType="map" resultMap="BaseResultMap">
    SELECT
    al.*,
    so.name orgName,
    su.name userName,
    re.name resName,
    r.name  roomName
    FROM
    alarms_log al
    LEFT JOIN sys_org so ON al.org_id = so.id
    LEFT JOIN sys_user su ON al.user_id = su.id
    LEFT JOIN res  re ON al.res_id=re.id
    LEFT JOIN  room r on al.room_id=r.id
<!--    <where>-->
<!--      <if test="data.orgId != null">-->
<!--        so.parent_id=#{data.orgId} or so.id=#{data.orgId}-->
<!--      </if>-->
<!--    </where>-->
  order by create_time
  </select>



</mapper>