package com.manage.idc.system.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.manage.idc.common.entiy.IdcConstant;
import com.manage.idc.common.entiy.PageRequest;
import com.manage.idc.common.enums.UserType;
import com.manage.idc.common.utils.*;
import com.manage.idc.readdev.domain.SysDevUser;
import com.manage.idc.readdev.mapper.SysDevUserMapper;
import com.manage.idc.system.domain.SysUser;
import com.manage.idc.system.domain.SysUserRole;
import com.manage.idc.system.mapper.SysUserMapper;
import com.manage.idc.system.service.SysUserRoleService;
import com.manage.idc.system.service.SysUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

/**
 * @Description
 * @Author lyq_j
 * @DATE 2019/10/14 9:25
 **/
@Service
public class SysUserServiceImpl implements SysUserService {
    @Autowired
    private SysUserMapper sysUserMapper;
    @Autowired
    private SysUserRoleService sysUserRoleService;

    @Autowired
    private SysDevUserMapper sysDevUserMapper;

    @Override
    public SysUser findByName(String username,Integer userType) {
        return sysUserMapper.findByName(username,userType);
    }

    @Override
    public SysUser checkUser(String username) {
        return sysUserMapper.checkUser(username);
    }

    @Override
    public PageInfo<SysUser> getPage(SysUser sysUser, PageRequest pageRequest) {
//        sysUser.set(SessionUtil.getUser().getFullCode());
        sysUser.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
        sysUser.setId(SessionUtil.getUser().getId());
        if(null != pageRequest){
            PageHelper.startPage(pageRequest.getPage(),pageRequest.getLimit());
        }
        List<SysUser> list = sysUserMapper.selectByCondition(DataSetUtile.setQueryMap(sysUser,pageRequest,SessionUtil.getUser()));
        return new PageInfo(list);
    }

    @Override
    @Transactional
    public void deleteUser(String userIds) {
        //删除用户
        SysUser sysUser = new SysUser();
        sysUser.setId(Long.parseLong(userIds));
        sysUser.setIsDel(IdcConstant.SYSTEM_ISDEL.DEL);
        sysUserMapper.updateUser(sysUser);
        //删除用户角色绑定关系
        sysUserRoleService.deleteUserRolesByUserId(Long.parseLong(userIds));
    }

    @Override
    @Transactional
    public void createUser(SysUser user) {
        user.setPassword(MD5Util.encrypt(user.getUsername().toLowerCase(),  Base64Utils.encode(user.getPassword())));
        user.setState(SysUser.STATUS_VALID);
        user.setUpdateTime(new Date());
        user.setCreateTime(new Date());
        user.setId(IdGen.getUUId());
        user.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
        int userId = sysUserMapper.createUser(user);
        //添加用户绑定的角色
        SysUserRole sysUserRole = new SysUserRole();
        sysUserRole.setRoleId(user.getRoleId());
        sysUserRole.setUserId(user.getId());
        sysUserRole.setIsDel(IdcConstant.SYSTEM_ISDEL.DEL);
        sysUserRoleService.insert(sysUserRole);
    }

    @Override
    @Transactional
    public void updateUser(SysUser sysUser) {
        sysUser.setUpdateTime(new Date());
        //更新用户信息
        if(sysUser.getPassword()!=null){
            String password = MD5Util.encrypt(sysUser.getUsername().toLowerCase(),  Base64Utils.encode(sysUser.getPassword()));
            sysUser.setPassword(password);
        }
        sysUserMapper.updateUser(sysUser);
        //更新用户角色关联关系
        SysUserRole sysUserRole = new SysUserRole();
        sysUserRole.setUserId(sysUser.getId());
        sysUserRole.setRoleId(sysUser.getRoleId());
        sysUserRoleService.updateUserRole(sysUserRole);
    }

    @Override
    public List<SysUser>
    getUserByOrgId(SysUser sysUser) {
        if(sysUser==null){
            sysUser.setOrgId(SessionUtil.getUser().getOrgId());
        }
        sysUser.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
        return sysUserMapper.getUserByOrgId(sysUser);
    }
    @Override
    public List<SysUser> getOrgCurrentUser(SysUser sysUser) {
        sysUser.setFullCode(SessionUtil.getUser().getFullCode());
        sysUser.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
        return sysUserMapper.getOrgCurrentUser(sysUser);
    }
    @Override
    public SysUser selectUserById(SysUser sysUser) {
        return sysUserMapper.selectUserById(sysUser);
    }

    @Override
    @Transactional
    public void editUserPassword(SysUser sysUser) {
        sysUserMapper.updateUser(sysUser);
    }

    @Override
    public PageInfo<SysDevUser> getDXQPage(SysDevUser sysDevUser, PageRequest pageRequest) {
        sysDevUser.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
        if(null != pageRequest){
            PageHelper.startPage(pageRequest.getPage(),pageRequest.getLimit());
        }
        List<SysDevUser> list = sysDevUserMapper.selectByCondition(DataSetUtile.setQueryMap(sysDevUser,pageRequest,SessionUtil.getUser()));
        return new PageInfo(list);
    }

    @Override
    @Transactional
    public void addDXQUser(SysDevUser sysDevUser) {
        sysDevUser.setId(IdGen.getUUId());
        sysDevUser.setPassword(MD5Util.encrypt(sysDevUser.getUsername().toLowerCase(),  Base64Utils.encode(sysDevUser.getPassword())));
        sysDevUser.setLoginStatus(0);
        sysDevUser.setCreatedTime(new Date());
        sysDevUser.setUpdatedTime(new Date());
        sysDevUser.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
        sysDevUserMapper.insert(sysDevUser);
    }

    @Override
    @Transactional
    public void updateDXQUser(SysDevUser sysDevUser) {
        sysDevUser.setUpdatedTime(new Date());
        sysDevUserMapper.updateByPrimaryKey(sysDevUser);
    }

    @Override
    @Transactional
    public void deleteDXQUser(SysDevUser sysDevUser) {
        sysDevUser.setIsDel(IdcConstant.SYSTEM_ISDEL.DEL);
        sysDevUserMapper.updateByPrimaryKey(sysDevUser);
    }

    @Override
    public List<SysUser> getAppOrgCurrentUser(SysUser sysUser) {
        sysUser.setIsDel(IdcConstant.SYSTEM_ISDEL.NOT_DEL);
        return sysUserMapper.getOrgCurrentUser(sysUser);
    }

}
